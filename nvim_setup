#!/bin/bash

NVIM='\033[38;2;88;147;61m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'
BLUE='\033[1;34m'
PURPLE='\033[38;2;120;93;200m'

clear

echo -e "${NVIM}███╗   ██╗██╗   ██╗██╗███╗   ███╗    ███████╗███████╗████████╗██╗   ██╗██████╗ ${NC}"
echo -e "${NVIM}████╗  ██║██║   ██║██║████╗ ████║    ██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗${NC}"
echo -e "${NVIM}██╔██╗ ██║██║   ██║██║██╔████╔██║    ███████╗█████╗     ██║   ██║   ██║██████╔╝${NC}"
echo -e "${NVIM}██║╚██╗██║╚██╗ ██╔╝██║██║╚██╔╝██║    ╚════██║██╔══╝     ██║   ██║   ██║██╔═══╝ ${NC}"
echo -e "${NVIM}██║ ╚████║ ╚████╔╝ ██║██║ ╚═╝ ██║    ███████║███████╗   ██║   ╚██████╔╝██║     ${NC}"
echo -e "${NVIM}╚═╝  ╚═══╝  ╚═══╝  ╚═╝╚═╝     ╚═╝    ╚══════╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝     ${NC}"
echo ""

spinner() {
  local pid=$1
  local msg=$2
  local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
  local i=0
  while [ -d /proc/$pid ]; do
    printf "\r${BLUE}%s${NC} %s" "${spinstr:$i:1}" "$msg"
    i=$(((i + 1) % ${#spinstr}))
    sleep 0.1
  done
  printf "\r${GREEN}✔ ${NC} %s\n" "$msg"
}
if [ "$(id -u)" -ne 0 ]; then
  echo -e "${RED}Бери sudo!${NC}" >&2
  exit 1
fi
echo ""
(apt update -qq >/dev/null 2>&1 && apt install -y fuse3 fd-find ripgrep git -qq >/dev/null 2>&1) &
spinner $! "Установка зависимостей..."
if [ $? -ne 0 ]; then
  echo -e "${RED}Не смог поставить fuse3, чекни логи!${NC}" >&2
  exit 1
fi
(wget -q -O nvim-linux-x86_64.appimage https://github.com/neovim/neovim/releases/download/nightly/nvim-linux-x86_64.appimage) &
spinner $! "Установка Neovim..."
if [ $? -ne 0 ]; then
  echo -e "${RED}Не смог скачать Neovim, проверь инет!${NC}" >&2
  exit 1
fi
(chmod u+x nvim-linux-x86_64.appimage) &
spinner $! "Настройка права Neovim..."
if [ $? -ne 0 ]; then
  echo -e "${RED}Не смог дать права, что-то не так!${NC}" >&2
  exit 1
fi
(mv nvim-linux-x86_64.appimage /usr/local/bin/nvim) &
spinner $! "Перемещение Neovim..."
if [ $? -ne 0 ]; then
  echo -e "${RED}Не смог переместить, проверь права!${NC}" >&2
  exit 1
fi
(
  mkdir -p ~/.config/nvim && cat <<'EOF' >~/.config/nvim/init.lua
vim.g.clipboard = 'osc52'
vim.g.mapleader = " "
vim.o.number = true
vim.o.swapfile = false
vim.o.winborder = "rounded"
vim.o.langmap = "ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz"
vim.o.undofile = true
vim.o.undodir = vim.fn.stdpath("state") .. "/undo"
vim.o.scrolloff = 20
vim.bo.shiftwidth = 2
vim.bo.tabstop = 2
vim.bo.expandtab = false
vim.o.signcolumn = "yes"
vim.keymap.set('v', '<C-c>', '"+y', { noremap = true })
vim.keymap.set('n', '<C-f>', '/', { noremap = true })
vim.keymap.set('n', '<M-,>', 'gt')
vim.keymap.set('n', '<M-.>', 'gT')
vim.keymap.set('n', '<C-a>', '<Cmd>normal! ggVG<CR>', { noremap = true })
vim.keymap.set({'n', 'v'}, '<S-v>', '^vg_', { noremap = true })
vim.keymap.set('n', '<leader>m', '<cmd>Mason<CR>')
vim.keymap.set('n', 'vv', 'V')
vim.keymap.set("n", "<leader>e", function() require("snacks").explorer() end, { desc = "Explorer" })
vim.pack.add{
  { src = 'https://github.com/MunifTanjim/nui.nvim' },
  { src = 'https://github.com/akinsho/bufferline.nvim' },
  { src = 'https://github.com/folke/noice.nvim' },
  { src = 'https://github.com/folke/snacks.nvim' },
  { src = 'https://github.com/folke/tokyonight.nvim' },
  { src = 'https://github.com/lukas-reineke/indent-blankline.nvim' },
  { src = 'https://github.com/nvim-lua/plenary.nvim' },
  { src = 'https://github.com/nvim-lualine/lualine.nvim' },
  { src = 'https://github.com/nvim-telescope/telescope-fzf-native.nvim' },
  { src = 'https://github.com/nvim-telescope/telescope.nvim' },
  { src = 'https://github.com/nvim-tree/nvim-web-devicons' },
  { src = 'https://github.com/sphamba/smear-cursor.nvim' },
  { src = 'https://github.com/mason-org/mason.nvim' },
  { src = 'https://github.com/neovim/nvim-lspconfig' },
}
vim.cmd(":hi statusline guibg=NONE guifg=#ffffff")
require('tokyonight').setup({
  transparent = true,
  styles = {
    sidebars = 'transparent',
    floats = 'transparent',
  },
})
vim.api.nvim_create_autocmd("BufReadPost", {
  pattern = "*",
  callback = function()
    local ft = vim.bo.filetype
    if ft == "gitcommit" or ft == "gitrebase" then return end
    
    local line = vim.fn.line("'\"")
    if line > 1 and line <= vim.fn.line("$") then
      vim.cmd('normal! g`"')
	    end
  end,
})
require("bufferline").setup{
  options = {
    always_show_bufferline = false
  }
}
vim.api.nvim_create_autocmd("BufWinLeave", {
  callback = function(args)
    local bufnr = args.buf
    vim.schedule(function()
      if not vim.api.nvim_buf_is_valid(bufnr) then return end
      if vim.bo[bufnr].buftype ~= "" then return end
      for _, win in ipairs(vim.api.nvim_list_wins()) do
        if vim.api.nvim_win_get_buf(win) == bufnr then return end
      end
      vim.cmd("bdelete " .. bufnr)
    end)
  end
})
require("mason").setup()
require('smear_cursor').setup({ hide_target_hack = true })
require("lualine").setup()
require("noice").setup({
  config = {
    cmdline = {
      enabled = true,
      view = "cmdline_popup",
    },
    presets = {
      command_palette = false,
      bottom_search = false,
    },
  }
})

vim.cmd("colorscheme tokyonight-moon")
local function find_files()
  require('telescope.builtin').find_files({
    hidden = true,
    previewer = false,
    layout_config = {
      width = 0.6,
      height = 0.7,
    },
    default_text = "",
    attach_mappings = function(_, map)
      map("i", "<CR>", require('telescope.actions').select_tab)
      map("n", "<CR>", require('telescope.actions').select_tab)
      return true
    end
  })
end
vim.keymap.set("n", "<leader>f", find_files, { noremap = true })
vim.keymap.set("n", "<leader>а", find_files, { noremap = true })
vim.keymap.set('n', '<leader>cf', '<cmd>lua vim.lsp.buf.format()<CR>')

vim.api.nvim_create_autocmd("VimEnter", {
  callback = function()
    if vim.fn.argv(0) == "" then
      vim.defer_fn(function()
        require('telescope.builtin').find_files({
          hidden = true,
          previewer = false,
          layout_config = {
            width = 0.6,
            height = 0.7,
          }
        })
      end, 10)
    end
  end,
})
require("ibl").setup({
  indent = {
    char = "│"
  },
  scope = {
    enabled = false
  }
})
require("snacks").setup({
  indent = { 
    enabled = true,
    indent = {
      enabled = false
    },
    scope = {
      enabled = true,
      char = "│"
    }
  },
  scroll = { enabled = true },
  animate = { enabled = true },
  explorer = { enabled = true }
})
require('lspconfig').jsonls.setup({
  on_attach = function(client, bufnr)
    client.server_capabilities.documentFormattingProvider = true
    vim.bo[bufnr].shiftwidth = 2
    vim.bo[bufnr].tabstop = 2
    vim.bo[bufnr].expandtab = true
  end
})
EOF
) &
spinner $! "Настройка init.lua..."
if [ $? -ne 0 ]; then
  echo -e "${RED}Не смог настроить init.lua, что-то пошло не так!${NC}" >&2
  exit 1
fi
(grep -q "alias vim=nvim" ~/.bashrc || echo "alias vim='nvim'" >>~/.bashrc) &
spinner $! "Добавление алиаса vim -> nvim..."
if [ $? -ne 0 ]; then
  echo -e "${RED}Не смог добавить алиас, проверь ~/.bashrc!${NC}" >&2
  exit 1
fi
echo -e "\n${PURPLE}☑️ Neovim успешно установлен.${NC}\n"
